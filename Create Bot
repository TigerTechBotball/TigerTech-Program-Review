#include <kipr/botball.h>
void arm(int position);
void claw(int position);
void right_90();
void left_90();
void forward(int miliseconds);
void back(int miliseconds);
void side_arm(int position);
int main()
    ////////////////////////////////////////////////////////
    //                                                    //
    //                by,                                 //
    //                     Jeremy & Hayden                //
    //                                    Feat(Austin)    //
    //                                                    //
    ////////////////////////////////////////////////////////

{

    enable_servos();
    create_connect();
    // start up

    arm(2000);
    claw(2000);
    side_arm(0);
	
    disable_servos();
    //driving out of the starting box

    right_90();
    forward(1500);

    //turning left

    left_90();

    //driving until the side arm is in between the green and red ore boxes
    set_create_distance(0);
    msleep(200);
    while(get_create_distance() < 900)
    {
        if(analog(0) < 3300)
        {
            create_drive_direct(10,90);
        }
        else
        {
            create_drive_direct(90,10);
        }
    }

    //lower side arm
 	enable_servos();
    side_arm(2000);

    //

    create_drive_direct(0,0);
    msleep(500);

    //pushing green into the box closest to the starting box

    create_drive_direct(-30,-30);
    msleep(8000);

  

    //pause
    create_drive_direct(0,0);
    msleep(500);
      
    
     
    
    

    

    //pause
    create_drive_direct(0,0);
    msleep(500);

    //side arm down
    side_arm(2000);
  
    //pause
    create_drive_direct(0,0);
    msleep(500);

   
   
   //pause
    create_drive_direct(0,0);
    msleep(500);
    
    disable_servos();
    
	//turning to astronates<- i don't can if this is spell wrong
    	// turn to rise the side_arm
    create_drive_direct(-40,40);
        msleep(700);
    create_drive_direct(50,-50);
        msleep(500);
    create_drive_direct(40,40);
    msleep(1200);
    // side_arm()
    enable_servos();
    side_arm(0);
    //pause
    create_drive_direct(0,0);
    msleep(500);
        create_drive_direct(50,-50);
        msleep(650);
    
    // pause
    create_drive_direct(0,0);
        msleep(500);
    	//riseing side_arm
    enable_servos();
        
   		 side_arm(0);
    //  meple knock
     create_drive_direct(50,-50);
     msleep(1300);
    
    create_drive_direct(20,20);
     msleep(3000);
    set_create_distance(0);
    msleep(200);
    
    // going to starting box line
    right_90();
  
      set_create_distance(0);
    msleep(200);
    while(get_create_distance() < 502)
    {
        if(analog(0) < 3300)
        {
            create_drive_direct(90,10);
        }
        else
        {
            create_drive_direct(10,90);
        }
    }
    //staighting
    right_90();
    right_90();
    back(1500);
    // right to minecrafts
    forward(630);
      create_drive_direct(200,-200);
    msleep(650);
    // driving to minecrafts
    
  set_create_distance(0);
    msleep(200);
    while(get_create_distance() < 352)
    {
         create_drive_direct(100,100);
    }
    
    return 0;
}
//raise and lower claw
void arm(int position)
{
    set_servo_position(1,position);
    msleep(100);
}
//open and close claw 
void claw(int position)
{
    set_servo_position(1,position);
    msleep(100);
}
// right turn
// if the number is lossed wheels are (200,-200) and 950ms
void right_90()
{
    create_drive_direct(200,-200);
    msleep(950);

}
// left turn
// if the number is lossed wheels are (-200,200) and 950ms
void left_90()
{
    create_drive_direct(-200,200);
    msleep(950);
}
// forward movement
void forward(int miliseconds)
{
    create_drive_direct(200,200);
    msleep(miliseconds);
}
// moving bakf

void back(int miliseconds)

{
    create_drive_direct(-200,-200);
    msleep(miliseconds);
}
//side arm
void side_arm(int position)
{
    set_servo_position(3,position);
    msleep(100);
}
